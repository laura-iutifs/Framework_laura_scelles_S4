package s4.spring.td2.controllers;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import io.github.jeemv.springboot.vuejs.VueJS;
import io.github.jeemv.springboot.vuejs.utilities.Http;
import s4.spring.td2.entities.Organization;
import s4.spring.td2.repositories.OrgasRepository;

@RestController
@RequestMapping("/rest/")
public class RestTestController {
	
	@Autowired
	private VueJS vue;
	
	@Autowired
	private OrgasRepository repo;
		
	
	@ResponseBody
	@GetMapping("")
	public List<Organization> read() { //affiche tout
		return repo.findAll();
	}

	@GetMapping("/orgas/{id}")
	public Optional<Organization> read(@PathVariable int id) { //affiche une en particulier
		return repo.findById(id);
	}
	
	@PostMapping("create")
	@ResponseBody
	public Organization create(@RequestBody Organization orga) {
		return repo.saveAndFlush(orga);
	}

	@PutMapping("update/{id}")
	public void update(@PathVariable int id, @RequestBody Organization orga) {
		if ( repo.findById(id).isPresent() ) {	
			//update
		}else {
			System.out.println("Erreur update");
		}
	}

	@DeleteMapping("delete/{id}")
	public void delete(@PathVariable int id, @RequestBody Organization orga) {
		try {
			repo.delete(orga);
		}catch(Exception e) {
			System.out.print("Erreur delete");
		}
	}

	
	@GetMapping("orgas")
	public String geneSpaOrgas(Model model) {

		model.addAttribute("vue", vue);
		List<Organization> orgas = repo.findAll();
		vue.addData("orgas", orgas);
		vue.addData("dialog", false);
		vue.addDataRaw("headers",
				"["
				+ "{text:'Name', value:'name'},"
				+ "{text:'Domain', value:'domain'},"
				+ "{text:'Aliases', value:'aliases'}]");
		vue.addDataRaw("editedItem", "{}");
		vue.addDataRaw("editedIndex", "-1");
		vue.addDataRaw("formTitle", " (this.itemIndex==-1)?'Nouvelle organisation':'Modification organisation' ");
		vue.addMethod("close", "this.dialog=false"); //fermer card
		
		vue.addMethod("save", "var self=this;" + Http.post("/rest/orgas/create", "self.editedItem",
				"self.ajaxMessage = response.data; self.dialog=false; self.orgas.push(response.data);")); //ajouter nouvelle orga
		
		/*vue.addMethod("editItem(props.item)", "var self=this;" + Http.put("/rest/orgas/update", "self.editedItem",
				"self.ajaxMessage = response.data; self.orgas.push(response.data); ")); //modifier orga */
		
		vue.addMethod("deleteItem(props.item)", "var self=this;" + Http.delete("/rest/orgas/delete", "self.editedItem(props.item)",
				"self.ajaxMessage = response.data; ")); //supprimer orga
		
		return "vueJs/index";

	}
	

}
